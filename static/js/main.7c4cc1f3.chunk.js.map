{"version":3,"sources":["RoundByRoundScoreboard/LineChart.js","RoundByRoundScoreboard/LoadButton.js","RoundByRoundScoreboard/index.js","App.js","serviceWorker.js","index.js"],"names":["LineChart","theme","fontSize","markers","this","props","ymax","data","length","gameLimit","axis","value","lineStyle","stroke","strokeWidth","legend","margin","top","right","bottom","left","xScale","type","min","max","yScale","stacked","motionStiffness","motionDamping","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","axisLeft","colors","scheme","pointSize","pointColor","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","React","Component","LoadButton","state","hover","styles1","background","color","border","width","height","fontWeight","styles2","styles3","toggleHover","setState","styles","activated","divStyle","size","onMouseEnter","onMouseLeave","onClick","id","name","dateModified","RBRS","players","points","totalPoints","pointsOrRounds","highScoreWins","modalVisible","savedScoreboards","scoreboardsList","loadButtonSelect","pointsOrRoundsRadio","highScoreWinsRadio","buttonStyle","iconStyle","radioStyle","display","marginLeft","notificationStyle","backgroundColor","addPoints","newPoints","document","getElementById","split","oldLeaderboard","makeLeaderboard","i","isNaN","parseInt","pop","push","newLeaderboard","notification","message","description","placement","duration","icon","maxIx","minIx","maxPoints","minPoints","loadScoreboard","newScoreboard","selected","title","closeModals","padNum","string","saveScoreboard","scoreboardTitle","today","Date","currentYear","getFullYear","currentMonth","getMonth","currentDate","getDate","todaysDate","toString","localStorage","setItem","JSON","stringify","console","log","addPlayer","newPlayer","removePlayer","player","splice","round","removeRound","clearPoints","clearPlayers","changeGameLimit","makeChartData","chartData","playerOngoingTotal","lastRound","x","y","playerInfo","modalClick","modal","radio","target","updateScoreboardTitle","deleteScoreboard","index","parse","getItem","scoreboard","emptyScoreboard","className","chartYmax","chartXmax","Math","playerIcons","pointsGameIsOver","noOneIsMax","noOneIsMin","twoToneColor","spin","saveScoreboardWarning","placeholder","onChange","Group","map","key","onConfirm","xmax","visible","onCancel","onOk","okText","cancelText","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8YAiHeA,E,2MA7GbC,MAAQ,CACNC,SAAU,U,wEAIV,IAAIC,EA8BJ,OAzBMA,EAJkB,SAApBC,KAAKC,MAAMC,KAEqB,qBAAvBF,KAAKC,MAAME,KAAK,IACrBH,KAAKC,MAAME,KAAK,GAAGA,KAAKC,QAAUJ,KAAKC,MAAMI,UACrC,CACR,CACEC,KAAM,IACNC,MAAOP,KAAKC,MAAMI,UAClBG,UAAW,CAAEC,OAAQ,UAAWC,YAAa,GAC7CC,OAAQ,eAOJ,GAIF,CACR,CACEL,KAAM,IACNC,MAAOP,KAAKC,MAAMI,UAClBG,UAAW,CAAEC,OAAQ,UAAWC,YAAa,GAC7CC,OAAQ,eAKZ,kBAAC,IAAD,CACER,KAAMH,KAAKC,MAAME,KACjBN,MAAOG,KAAKH,MACZE,QAASA,EACTa,OAAQ,CAAEC,IAAK,GAAIC,MAAO,IAAKC,OAAQ,IAAKC,KAAM,KAClDC,OAAQ,CAAEC,KAAM,QAASC,IAAK,OAAQC,IAAK,IAC3CC,OAAQ,CACNH,KAAM,SACNI,SAAS,EACTH,IAAK,OACLC,IAAKpB,KAAKC,MAAMC,MAElBqB,gBAAiB,GACjBC,cAAe,EACfC,QAAS,KACTC,UAAW,KACXC,WAAY,CACVC,OAAQ,SACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdpB,OAAQ,GACRqB,aAAc,GACdC,eAAgB,UAElBC,SAAU,CACRN,OAAQ,OACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdpB,OAAQ,GACRqB,cAAe,GACfC,eAAgB,UAElBE,OAAQ,CAAEC,OAAQ,QAClBC,UAAW,GACXC,WAAY,CAAEzC,MAAO,cACrB0C,iBAAkB,EAClBC,iBAAkB,CAAEC,KAAM,cAC1BC,WAAW,IACXC,mBAAoB,GACpBC,SAAS,EACTC,QAAS,CACP,CACEC,OAAQ,eACRC,UAAW,SACXC,SAAS,EACTC,WAAY,IACZC,WAAY,EACZC,aAAc,EACdC,cAAe,gBACfC,UAAW,GACXC,WAAY,GACZC,YAAa,IACbC,WAAY,GACZC,YAAa,SACbC,kBAAmB,oBACnBC,QAAS,CACP,CACEC,GAAI,QACJC,MAAO,CACLC,eAAgB,qBAChBP,YAAa,a,GAnGPQ,IAAMC,WCsEfC,E,2MArEbC,MAAQ,CACNC,OAAO,G,EAGTC,QAAU,CACRC,WAAY,qBACZC,MAAO,iBACPC,OAAQ,+BACR3D,OAAQ,MACR4D,MAAO,OACPC,OAAQ,MACR3E,SAAU,MACV4E,WAAY,Q,EAGdC,QAAU,CACRN,WAAY,qBACZC,MAAO,oBACPC,OAAQ,8BACR3D,OAAQ,MACR4D,MAAO,OACPC,OAAQ,MACR3E,SAAU,MACV4E,WAAY,Q,EAGdE,QAAU,CACRP,WAAY,oBACZC,MAAO,oBACPC,OAAQ,8BACR3D,OAAQ,MACR4D,MAAO,OACPC,OAAQ,MACR3E,SAAU,MACV4E,WAAY,Q,EAGdG,YAAc,WACZ,EAAKC,SAAS,CAAEX,OAAQ,EAAKD,MAAMC,S,wEAI3B,IAAD,OACHY,EAAS/E,KAAKoE,QAOlB,OANIpE,KAAKkE,MAAMC,QAAUnE,KAAKC,MAAM+E,UAClCD,EAAS/E,KAAK2E,QACL3E,KAAKC,MAAM+E,YACpBD,EAAS/E,KAAK4E,SAId,yBAAKf,MAAO7D,KAAKiF,UACf,kBAAC,IAAD,CACEpB,MAAOkB,EACPG,KAAK,QACLhE,KAAK,UACLiE,aAAc,kBAAM,EAAKN,eACzBO,aAAc,kBAAM,EAAKP,eACzBQ,QAAS,kBAAM,EAAKpF,MAAMoF,QAAQ,EAAKpF,MAAMqF,MAE5CtF,KAAKC,MAAMsF,KACZ,6BACCvF,KAAKC,MAAMuF,mB,GA/DGzB,IAAMC,WCo0BhByB,E,2MAh0BbvB,MAAQ,CACNwB,QAAS,GACTC,OAAQ,GACRC,YAAa,GACbC,eAAgB,EAAC,GAAM,GACvBC,eAAe,EACfzF,UAAW,IACX0F,aAAc,EAAC,GAAO,GAAO,GAC7BC,iBAAkB,GAClBC,gBAAiB,GACjBC,iBAAkB,GAClBC,oBAAqB,EACrBC,mBAAoB,G,EAGtBC,YAAc,CACZvG,SAAU,SACV2E,OAAQ,MACR7D,OAAQ,Q,EAGV0F,UAAY,CACV1F,OAAQ,OACRd,SAAU,Q,EAGZyG,WAAa,CACXC,QAAS,QACT/B,OAAQ,QACR3E,SAAU,MACV2G,WAAY,Q,EAGdC,kBAAoB,CAClBjC,OAAQ,OACRD,MAAO,OACPmC,gBAAiB,qB,EAmBnBC,UAAY,WAKV,IAJA,IAAIjB,EAAM,YAAO,EAAKzB,MAAMyB,QAC1BC,EAAW,YAAO,EAAK1B,MAAM0B,aAC7BiB,EAAYC,SAASC,eAAe,aAAaxG,MAAMyG,MAAM,KAC3DC,EAAiB,EAAKC,gBAAgBtB,GACjCuB,EAAI,EAAGA,EAAIN,EAAUzG,SAAU+G,EACjB,KAAjBN,EAAUM,GACZN,EAAUM,GAAK,EACNC,MAAMC,SAASR,EAAUM,KAClCN,EAAUM,GAAK,EAEfN,EAAUM,GAAKE,SAASR,EAAUM,GAAI,IAG1C,KAAON,EAAUzG,OAAS,EAAK8D,MAAMwB,QAAQtF,QAC3CyG,EAAUS,MAEZ,KAAOT,EAAUzG,OAAS,EAAK8D,MAAMwB,QAAQtF,QAC3CyG,EAAUU,KAAK,GAEjB,GAAIV,EAAUzG,OAAS,EAAG,CACxBuF,EAAO4B,KAAKV,GACZ,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAUzG,SAAU+G,EACtCvB,EAAYuB,IAAMN,EAAUM,GAGhC,IAAIK,EAAiB,EAAKN,gBAAgBtB,GACtC,EAAK1B,MAAM4B,cACT0B,EAAe,KAAOP,EAAe,GACvCQ,IAAY,QAAY,CACtBC,QAASF,EAAe,GAAK,mBAC7BG,YAAa,GACbC,UAAW,aACXC,SAAU,EACVC,KAAM,kBAAC,IAAD,CAAM5G,KAAK,QAAQ2C,MAAO,CAAES,MAAO,sBACzCT,MAAO,EAAK6C,oBAELc,EAAe,KAAOP,EAAe,IAC9CQ,IAAY,QAAY,CACtBC,QAASF,EAAe,GAAK,wBAC7BG,YAAa,GACbC,UAAW,aACXC,SAAU,EACVC,KAAM,kBAAC,IAAD,CAAM5G,KAAK,QAAQ2C,MAAO,CAAES,MAAO,sBACzCT,MAAO,EAAK6C,oBAIZc,EAAe,KAAOP,EAAe,GACvCQ,IAAY,QAAY,CACtBC,QAASF,EAAe,GAAK,mBAC7BG,YAAa,GACbC,UAAW,aACXC,SAAU,EACVC,KAAM,kBAAC,IAAD,CAAM5G,KAAK,QAAQ2C,MAAO,CAAES,MAAO,sBACzCT,MAAO,EAAK6C,oBAELc,EAAe,KAAOP,EAAe,IAC9CQ,IAAY,QAAY,CACtBC,QAASF,EAAe,GAAK,wBAC7BG,YAAa,GACbC,UAAW,aACXC,SAAU,EACVC,KAAM,kBAAC,IAAD,CAAM5G,KAAK,QAAQ2C,MAAO,CAAES,MAAO,sBACzCT,MAAO,EAAK6C,oBAKlB,EAAK5B,SAAS,CAAEa,WAChB,EAAKb,SAAS,CAAEc,iB,EAGlBsB,gBAAkB,SAAAtB,GAKhB,IAJA,IAEEmC,EACAC,EAHEC,GAAa,EACfC,EAAY,IAGLf,EAAI,EAAGA,EAAIvB,EAAYxF,OAAQ+G,IAClCvB,EAAYuB,GAAKc,IACnBA,EAAYrC,EAAYuB,GACxBY,EAAQZ,GAENvB,EAAYuB,GAAKe,IACnBA,EAAYtC,EAAYuB,GACxBa,EAAQb,GAGZ,MAAO,CAAC,EAAKjD,MAAMwB,QAAQqC,GAAQ,EAAK7D,MAAMwB,QAAQsC,K,EAGxDG,eAAiB,WAEf,IADA,IAAIC,EAAgB,OACXjB,EAAI,EAAGA,EAAI,EAAKjD,MAAM+B,gBAAgB7F,SAAU+G,EACnD,EAAKjD,MAAM+B,gBAAgBkB,GAAGkB,WAChCD,EAAgB,EAAKlE,MAAM+B,gBAAgBkB,GAAGmB,OAG5B,SAAlBF,IACF,EAAKtD,SAAS,CACZY,QAAS,EAAKxB,MAAM8B,iBAAiBoC,GAAe1C,UAEtD,EAAKZ,SAAS,CACZa,OAAQ,EAAKzB,MAAM8B,iBAAiBoC,GAAezC,SAErD,EAAKb,SAAS,CACZc,YAAa,EAAK1B,MAAM8B,iBAAiBoC,GAAexC,cAE1D,EAAKd,SAAS,CACZe,eAAgB,EAAK3B,MAAM8B,iBAAiBoC,GACzCvC,iBAEL,EAAKf,SAAS,CACZzE,UAAW,EAAK6D,MAAM8B,iBAAiBoC,GAAe/H,aAI1D,IADA,IAAI4F,EAAe,YAAO,EAAK/B,MAAM+B,iBAC5BkB,EAAI,EAAGA,EAAIlB,EAAgB7F,SAAU+G,EAC5ClB,EAAgBkB,GAAGkB,UAAW,EAEhC,EAAKvD,SAAS,CAAEmB,oBAChB,EAAKsC,e,EAGPC,OAAS,SAAAC,GAMP,OAHsB,IAAlBA,EAAOrI,SACTqI,EAAS,IAAMA,GAEVA,G,EAGTC,eAAiB,WACf,GACwC,qBAA/B,EAAKxE,MAAMyE,iBACa,SAA/B,EAAKzE,MAAMyE,gBAEXlB,IAAY,QAAY,CACtBC,QAAS,eACTC,YAAa,yBACbC,UAAW,aACXC,SAAU,QAEP,CACL,IAAIe,EAAQ,IAAIC,KACZC,EAAcF,EAAMG,cACpBC,EAAeJ,EAAMK,WAAa,EAClCC,EAAcN,EAAMO,UACpBC,EACF,EAAKZ,OAAOQ,EAAaK,YACzB,IACA,EAAKb,OAAOU,EAAYG,YACxB,IACAP,EAAYO,WACVrD,EAAmB,EAAK9B,MAAM8B,iBAC9BoC,EAAgB,CAClBE,MAAO,EAAKpE,MAAMyE,gBAClBhD,OAAQ,EAAKzB,MAAMyB,OACnBD,QAAS,EAAKxB,MAAMwB,QACpBE,YAAa,EAAK1B,MAAM0B,YACxBC,eAAgB,EAAK3B,MAAM2B,eAC3BxF,UAAW,EAAK6D,MAAM7D,UACtBmF,aAAc4D,GAEhBpD,EAAiB,EAAK9B,MAAMyE,iBAAmBP,EAC/C,IAAInC,EAAe,YAAO,EAAK/B,MAAM+B,iBACrCA,EAAgBsB,KAAK,CACnBe,MAAOF,EAAcE,MACrB9C,aAAc4C,EAAc5C,aAC5B6C,UAAU,IAEZ,EAAKvD,SAAS,CAAEkB,qBAChBsD,aAAaC,QACX,mBACAC,KAAKC,UAAUzD,IAEjB0D,QAAQC,IAAI3D,EAAkBwD,KAAKC,UAAUzD,IAC7C,EAAKlB,SAAS,CAAEmB,oBAChB,EAAKsC,gB,EAITqB,UAAY,WACV,IAAIC,EAAY/C,SAASC,eAAe,cAAcxG,MACtD,GAAkB,KAAdsJ,EAAkB,CACpB,IAAInE,EAAO,YAAO,EAAKxB,MAAMwB,SACzBE,EAAW,YAAO,EAAK1B,MAAM0B,aAC7BD,EAAM,YAAO,EAAKzB,MAAMyB,QAC5BD,EAAQ6B,KAAKsC,GACbjE,EAAY2B,KAAK,GACjB,IAAK,IAAIJ,EAAI,EAAGA,EAAIxB,EAAOvF,SAAU+G,EACnCxB,EAAOwB,GAAGI,KAAK,GAEjB,EAAKzC,SAAS,CAAEY,YAChB,EAAKZ,SAAS,CAAEc,gBAChB,EAAKd,SAAS,CAAEa,a,EAIpBmE,aAAe,SAAAC,GACb,IAAIrE,EAAO,YAAO,EAAKxB,MAAMwB,SAC7BA,EAAQsE,OAAOD,EAAQ,GACvB,IAAInE,EAAW,YAAO,EAAK1B,MAAM0B,aACjCA,EAAYoE,OAAOD,EAAQ,GAE3B,IADA,IAAIpE,EAAS,EAAKzB,MAAMyB,OACfsE,EAAQ,EAAGA,EAAQtE,EAAOvF,SAAU6J,EAC3CtE,EAAOsE,GAAOD,OAAOD,EAAQ,GAE/B,EAAKjF,SAAS,CAAEY,YAChB,EAAKZ,SAAS,CAAEc,gBAChB,EAAKd,SAAS,CAAEa,Y,EAGlBuE,YAAc,SAAAD,GAGZ,IAFA,IAAItE,EAAM,YAAO,EAAKzB,MAAMyB,QACxBC,EAAW,YAAO,EAAK1B,MAAM0B,aACxBuB,EAAI,EAAGA,EAAIvB,EAAYxF,SAAU+G,EACxCvB,EAAYuB,IAAMxB,EAAOsE,GAAO9C,GAElCxB,EAAOqE,OAAOC,EAAO,GACrB,EAAKnF,SAAS,CAAEa,WAChB,EAAKb,SAAS,CAAEc,iB,EAGlBuE,YAAc,WAEZ,IADA,IAAIvE,EAAc,GACTuB,EAAI,EAAGA,EAAI,EAAKjD,MAAMwB,QAAQtF,SAAU+G,EAC/CvB,EAAY2B,KAAK,GAEnB,EAAKzC,SAAS,CAAEa,OAAQ,KACxB,EAAKb,SAAS,CAAEc,iB,EAGlBwE,aAAe,WACb,EAAKtF,SAAS,CAAEa,OAAQ,KACxB,EAAKb,SAAS,CAAEc,YAAa,KAC7B,EAAKd,SAAS,CAAEY,QAAS,M,EAG3B6C,YAAc,WACZ,EAAKzD,SAAS,CAAEiB,aAAc,EAAC,GAAO,GAAO,M,EAG/CsE,gBAAkB,WAChB,IAAIhK,EAAYgH,SAASP,SAASC,eAAe,aAAaxG,MAAO,IAC5C,kBAAdF,EACT,EAAKyE,SAAS,CAAEzE,cAEhB,EAAKyE,SAAS,CAAEzE,UAAW,O,EAI/BiK,cAAgB,WAEd,IADA,IAAIC,EAAY,GACPR,EAAS,EAAGA,EAAS,EAAK7F,MAAMwB,QAAQtF,SAAU2J,EAAQ,CAEjE,IADA,IAAIS,EAAqB,GAEnBC,EAAY,EAChBA,EAAY,EAAKvG,MAAMyB,OAAOvF,SAC5BqK,EACF,CAEA,IADA,IAAI7E,EAAc,EACTqE,EAAQ,EAAGA,GAASQ,IAAaR,EACxCrE,GAAe,EAAK1B,MAAMyB,OAAOsE,GAAOF,GAE1CS,EAAmBjD,KAAK,CAAEmD,EAAGD,EAAY,EAAGE,EAAG/E,IAEjD,IAAIgF,EAAa,CACftF,GAAI,EAAKpB,MAAMwB,QAAQqE,GACvB5J,KAAMqK,GAERD,EAAUhD,KAAKqD,GAEjB,OAAOL,G,EAGTM,WAAa,SAAAC,GAEX,IADA,IAAI/E,EAAe,GACVoB,EAAI,EAAGA,EAAI,EAAKjD,MAAM6B,aAAa3F,SAAU+G,EAChDA,IAAM2D,EACR/E,EAAawB,MAAK,GAElBxB,EAAawB,MAAK,GAGtB,EAAKzC,SAAS,CAAEiB,kB,EAGlBF,eAAiB,SAAAkF,GACXA,EAAMC,OAAOzK,OACf,EAAKuE,SAAS,CAAEe,eAAgB,EAAC,GAAO,KACxC,EAAKf,SAAS,CAAEqB,oBAAqB,MAErC,EAAKrB,SAAS,CAAEe,eAAgB,EAAC,GAAM,KACvC,EAAKf,SAAS,CAAEqB,oBAAqB,M,EAIzCL,cAAgB,SAAAiF,GACVA,EAAMC,OAAOzK,OACf,EAAKuE,SAAS,CAAEgB,eAAe,IAC/B,EAAKhB,SAAS,CAAEsB,mBAAoB,MAEpC,EAAKtB,SAAS,CAAEgB,eAAe,IAC/B,EAAKhB,SAAS,CAAEsB,mBAAoB,M,EAIxC6E,sBAAwB,WACtB,IAAItC,EAAkB7B,SAASC,eAAe,mBAAmBxG,MACjE,EAAKuE,SAAS,CAAE6D,qB,EAGlBzC,iBAAmB,SAAAZ,GAEjB,IADA,IAAIW,EAAkB,EAAK/B,MAAM+B,gBACxBkB,EAAI,EAAGA,EAAI,EAAKjD,MAAM+B,gBAAgB7F,SAAU+G,EAErDlB,EAAgBkB,GAAGkB,SADjBlB,IAAM7B,IACuBW,EAAgBkB,GAAGkB,SAKtD,EAAKvD,SAAS,CAAEmB,qB,EAGlBiF,iBAAmB,SAACvC,EAAiBwC,GACnCzB,QAAQC,IAAIhB,EAAiBwC,GAC7B,IAAInF,EAAmB,EAAK9B,MAAM8B,wBAC3BA,EAAiB2C,GACxB,IAAI1C,EAAe,YAAO,EAAK/B,MAAM+B,iBACrCA,EAAgB+D,OAAOmB,EAAO,GAC9B,EAAKrG,SAAS,CAAEkB,qBAChB,EAAKlB,SAAS,CAAEmB,oBAChBqD,aAAaC,QAAQ,mBAAoBC,KAAKC,UAAUzD,K,mFA5VxD,IAAIA,EACFwD,KAAK4B,MAAM9B,aAAa+B,QAAQ,sBAAwB,GACtDpF,EAAkB,GACtB,IAAK,IAAIqF,KAActF,EACrBC,EAAgBsB,KAAK,CACnBe,MAAOgD,EACP9F,aAAcQ,EAAiBsF,GAAY9F,aAC3C6C,UAAU,IAGdrI,KAAK8E,SAAS,CAAEkB,qBAChBhG,KAAK8E,SAAS,CAAEmB,sB,+BAoVR,IAEJsF,EAFG,OACP7B,QAAQC,IAAI3J,KAAKkE,MAAM8B,kBAEW,IAA9BhG,KAAKkE,MAAMwB,QAAQtF,SACrBmL,EACE,yBAAKC,UAAU,mBAAf,2BAC2B,IACzB,kBAAC,IAAD,CACEtK,KAAK,YACL2C,MAAO7D,KAAKqG,YACZhB,QAAS,kBAAM,EAAKwF,WAAW,KAHjC,iBAeN,IAJA,IAaIY,EAAWC,EAbXnB,EAAYvK,KAAKsK,gBAEjBrC,EAAY,EACdC,EAAY,IACLf,EAAI,EAAGA,EAAInH,KAAKkE,MAAM0B,YAAYxF,SAAU+G,EAC/CnH,KAAKkE,MAAM0B,YAAYuB,GAAKc,IAC9BA,EAAYjI,KAAKkE,MAAM0B,YAAYuB,IAEjCnH,KAAKkE,MAAM0B,YAAYuB,GAAKe,IAC9BA,EAAYlI,KAAKkE,MAAM0B,YAAYuB,IAKnCnH,KAAKkE,MAAM2B,eAAe,IAE5B4F,EAAYE,KAAKvK,IAAI,IAAMpB,KAAKkE,MAAM7D,UAAW4H,GACjDyD,EAAY1L,KAAKkE,MAAMyB,OAAOvF,OAAS,IAGvCqL,EAAY,OACZC,EAAY1L,KAAKkE,MAAM7D,UAAY,GAOrC,IAJA,IAAIuL,EAAc,GAChBC,GAAmB,EACnBC,GAAa,EACbC,GAAa,EACNhC,EAAS,EAAGA,EAAS/J,KAAKkE,MAAMwB,QAAQtF,SAAU2J,EACrD/J,KAAKkE,MAAM0B,YAAYmE,IAAW/J,KAAKkE,MAAM7D,YAC/CwL,GAAmB,GAGvB,IAAK,IAAI9B,EAAS,EAAGA,EAAS/J,KAAKkE,MAAMwB,QAAQtF,SAAU2J,EACrD/J,KAAKkE,MAAM2B,eAAe,GAExB7F,KAAKkE,MAAM4B,cAGX+F,GACA7L,KAAKkE,MAAM0B,YAAYmE,KAAY9B,GACnCjI,KAAKkE,MAAMyB,OAAOvF,OAAS,EAE3BwL,EAAYrE,KACV,kBAAC,IAAD,CACErG,KAAK,OACLrB,MAAM,UACNmM,aAAa,UACbC,MAAI,KAIRjM,KAAKkE,MAAM0B,YAAYmE,KAAY9B,GACnCjI,KAAKkE,MAAMyB,OAAOvF,OAAS,GAC3B0L,GAEAF,EAAYrE,KACV,kBAAC,IAAD,CAAMrG,KAAK,QAAQrB,MAAM,UAAUmM,aAAa,aAElDF,GAAa,GAEb9L,KAAKkE,MAAM0B,YAAYmE,KAAY7B,GACnClI,KAAKkE,MAAMyB,OAAOvF,OAAS,EAE3BwL,EAAYrE,KACV,kBAAC,IAAD,CAAMrG,KAAK,QAAQrB,MAAM,UAAUmM,aAAa,aAGlDJ,EAAYrE,KACV,kBAAC,IAAD,CAAMrG,KAAK,MAAMrB,MAAM,UAAUmM,aAAa,aAMhDH,GACA7L,KAAKkE,MAAM0B,YAAYmE,KAAY7B,GACnClI,KAAKkE,MAAMyB,OAAOvF,OAAS,EAE3BwL,EAAYrE,KACV,kBAAC,IAAD,CACErG,KAAK,OACLrB,MAAM,UACNmM,aAAa,UACbC,MAAI,KAIRjM,KAAKkE,MAAM0B,YAAYmE,KAAY7B,GACnClI,KAAKkE,MAAMyB,OAAOvF,OAAS,GAC3B2L,GAEAH,EAAYrE,KACV,kBAAC,IAAD,CAAMrG,KAAK,QAAQrB,MAAM,UAAUmM,aAAa,aAElDD,GAAa,GAEb/L,KAAKkE,MAAM0B,YAAYmE,KAAY9B,GACnCjI,KAAKkE,MAAMyB,OAAOvF,OAAS,EAE3BwL,EAAYrE,KACV,kBAAC,IAAD,CAAMrG,KAAK,QAAQrB,MAAM,UAAUmM,aAAa,aAGlDJ,EAAYrE,KACV,kBAAC,IAAD,CAAMrG,KAAK,MAAMrB,MAAM,UAAUmM,aAAa,aAMhDhM,KAAKkE,MAAM4B,cAGXyE,EAAU,GAAGpK,KAAKC,QAAUJ,KAAKkE,MAAM7D,WACvCL,KAAKkE,MAAM0B,YAAYmE,KAAY9B,EAEnC2D,EAAYrE,KACV,kBAAC,IAAD,CACErG,KAAK,OACLrB,MAAM,UACNmM,aAAa,UACbC,MAAI,KAIRjM,KAAKkE,MAAM0B,YAAYmE,KAAY9B,GACnCjI,KAAKkE,MAAMyB,OAAOvF,OAAS,GAC3B0L,GAEAF,EAAYrE,KACV,kBAAC,IAAD,CAAMrG,KAAK,QAAQrB,MAAM,UAAUmM,aAAa,aAElDF,GAAa,GAEb9L,KAAKkE,MAAM0B,YAAYmE,KAAY7B,GACnClI,KAAKkE,MAAMyB,OAAOvF,OAAS,EAE3BwL,EAAYrE,KACV,kBAAC,IAAD,CAAMrG,KAAK,QAAQrB,MAAM,UAAUmM,aAAa,aAGlDJ,EAAYrE,KACV,kBAAC,IAAD,CAAMrG,KAAK,MAAMrB,MAAM,UAAUmM,aAAa,aAMhDzB,EAAU,GAAGpK,KAAKC,QAAUJ,KAAKkE,MAAM7D,WACvCL,KAAKkE,MAAM0B,YAAYmE,KAAY7B,EAEnC0D,EAAYrE,KACV,kBAAC,IAAD,CACErG,KAAK,OACLrB,MAAM,UACNmM,aAAa,UACbC,MAAI,KAIRjM,KAAKkE,MAAM0B,YAAYmE,KAAY7B,GACnClI,KAAKkE,MAAMyB,OAAOvF,OAAS,GAC3B2L,GAEAH,EAAYrE,KACV,kBAAC,IAAD,CAAMrG,KAAK,QAAQrB,MAAM,UAAUmM,aAAa,aAElDD,GAAa,GAEb/L,KAAKkE,MAAM0B,YAAYmE,KAAY9B,GACnCjI,KAAKkE,MAAMyB,OAAOvF,OAAS,EAE3BwL,EAAYrE,KACV,kBAAC,IAAD,CAAMrG,KAAK,QAAQrB,MAAM,UAAUmM,aAAa,aAGlDJ,EAAYrE,KACV,kBAAC,IAAD,CAAMrG,KAAK,MAAMrB,MAAM,UAAUmM,aAAa,aAOxD,IAAIE,EAAwB,yBAAKV,UAAU,0BAa3C,MAVE,qBADOxL,KAAKkE,MAAM8B,iBAAiBhG,KAAKkE,MAAMyE,mBAG9CuD,EACE,yBAAKV,UAAU,yBAAf,8EAQF,6BACE,yBAAKA,UAAU,eACb,kBAAC,IAAD,CACEtK,KAAK,YACL2C,MAAO7D,KAAKqG,YACZhB,QAAS,kBAAM,EAAKwF,WAAW,KAHjC,mBAOA,kBAAC,IAAD,CACE3J,KAAK,YACL2C,MAAO7D,KAAKqG,YACZhB,QAAS,kBAAM,EAAKwF,WAAW,KAHjC,mBAOA,kBAAC,IAAD,CACE3J,KAAK,YACL2C,MAAO7D,KAAKqG,YACZhB,QAAS,kBAAM,EAAKwF,WAAW,KAHjC,eAOA,kBAAC,IAAD,CACE3J,KAAK,SACL2C,MAAO7D,KAAKqG,YACZhB,QAASrF,KAAKmK,aAHhB,gBAOA,kBAAC,IAAD,CACEjJ,KAAK,SACL2C,MAAO7D,KAAKqG,YACZhB,QAASrF,KAAKoK,cAHhB,iBAOA,yBAAKoB,UAAU,aAAf,cACc,IACZ,2BACEtK,KAAK,OACLgE,KAAK,IACLI,GAAG,YACH6G,YAAY,MACZC,SAAUpM,KAAKqK,kBAEjB,kBAAC,IAAMgC,MAAP,CACED,SAAUpM,KAAK6F,eACftF,MAAOP,KAAKkE,MAAMiC,qBAElB,kBAAC,IAAD,CAAO5F,MAAO,EAAGsD,MAAO7D,KAAKuG,YAA7B,UAGA,kBAAC,IAAD,CAAOhG,MAAO,EAAGsD,MAAO7D,KAAKuG,YAA7B,WAIF,0BAAMiF,UAAU,YACd,kBAAC,IAAMa,MAAP,CACED,SAAUpM,KAAK8F,cACfvF,MAAOP,KAAKkE,MAAMkC,oBAElB,kBAAC,IAAD,CAAO7F,MAAO,EAAGsD,MAAO7D,KAAKuG,YAA7B,sBAGA,kBAAC,IAAD,CAAOhG,MAAO,EAAGsD,MAAO7D,KAAKuG,YAA7B,yBAOR,yBAAKiF,UAAU,aACb,2BAAOtK,KAAK,OAAOiL,YAAY,gBAAgB7G,GAAG,cAClD,kBAAC,IAAD,CACEpE,KAAK,UACL2C,MAAO7D,KAAKqG,YACZhB,QAASrF,KAAK4G,WAHhB,eAQD2E,EACD,+BACE,+BACE,4BACE,wBAAIC,UAAU,cACbxL,KAAKkE,MAAMwB,QAAQ4G,KAAI,SAACvC,EAAQoB,GAAT,OACtB,wBAAIoB,IAAK,SAAWpB,GACjBpB,EADH,IACW,6BACR6B,EAAYT,GAFf,IAEwB,EAAKjH,MAAM0B,YAAYuF,GAC7C,6BACA,kBAAC,IAAD,CACE7C,MAAO,UAAYyB,EAAS,cAC5ByC,UAAW,kBAAM,EAAK1C,aAAaqB,KAEnC,kBAAC,IAAD,CACEjK,KAAK,eACLrB,MAAM,UACNmM,aAAa,UACbnI,MAAO,EAAKyC,mBAOxB,+BACGtG,KAAKkE,MAAMyB,OAAO2G,KAAI,SAACrC,EAAOkB,GAAR,OACrB,wBAAIoB,IAAK,YAAcpB,GACrB,wBAAIK,UAAU,eACZ,kBAAC,IAAD,CACElD,MACE,iBACCjB,SAAS8D,EAAO,IAAM,GAAG9B,WAC1B,KAEFmD,UAAW,kBAAM,EAAKtC,YAAYiB,KAElC,kBAAC,IAAD,CACEjK,KAAK,eACLrB,MAAM,UACNmM,aAAa,UACbnI,MAAO,EAAKyC,aAGf6E,EAAQ,GAEVlB,EAAMqC,KAAI,SAAAvC,GAAM,OACf,wBAAIwC,IAAK,aAAepB,EAAQ,IAAMpB,GAASA,YAMzD,yBAAKyB,UAAU,aACb,kBAAC,EAAD,CACEiB,KAAMf,EACNxL,KAAMuL,EACNpL,UAAWL,KAAKkE,MAAM7D,UACtBF,KAAMoK,KAGV,kBAAC,IAAD,CACEmC,QAAS1M,KAAKkE,MAAM6B,aAAa,GACjC4G,SAAU3M,KAAKuI,YACfqE,KAAM5M,KAAKmI,gBAEX,yBAAKqD,UAAU,SAAf,uBACsB,6BACnBxL,KAAKkE,MAAM+B,gBAAgBqG,KAAI,SAAChB,EAAYH,GAAb,OAC9B,6BACE,kBAAC,EAAD,CACEoB,IAAK,cAAgBjB,EAAWhD,MAChChD,GAAI6F,EACJ5F,KAAM+F,EAAWhD,MACjB9C,aAAc8F,EAAW9F,aACzBR,UAAW,EAAKd,MAAM+B,gBAAgBkF,GAAO9C,SAC7ChD,QAAS,EAAKa,mBAEhB,kBAAC,IAAD,CACEoC,MAAO,UAAYgD,EAAWhD,MAAQ,KACtCkE,UAAW,kBACT,EAAKtB,iBAAiBI,EAAWhD,MAAO6C,KAG1C,kBAAC,IAAD,CACEjK,KAAK,eACLrB,MAAM,UACNmM,aAAa,UACbnI,MAAO,EAAKyC,mBAOxB,kBAAC,IAAD,CACEoG,QAAS1M,KAAKkE,MAAM6B,aAAa,GACjC4G,SAAU3M,KAAKuI,YACfqE,KAAM5M,KAAK0I,eACXmE,OAAO,QAEP,yBAAKrB,UAAU,SAAf,uBACsB,6BACpB,2BACEtK,KAAK,OACLiL,YAAY,QACZ7G,GAAG,kBACH8G,SAAUpM,KAAKiL,wBAEhBiB,IAGL,kBAAC,IAAD,CACEQ,QAAS1M,KAAKkE,MAAM6B,aAAa,GACjC4G,SAAU3M,KAAKuI,YACfuE,WAAW,OACXF,KAAM5M,KAAKuI,aAEX,yBAAKiD,UAAU,SAAf,eACc,6BACZ,2BACEtK,KAAK,OACLiL,YAAY,cACZ7G,GAAG,eAEL,6BACA,kBAAC,IAAD,CACEzB,MAAO7D,KAAKqG,YACZnF,KAAK,UACLgE,KAAK,QACLG,QAASrF,KAAK4J,WAJhB,qB,GAlzBO7F,IAAMC,WCQV+I,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxG,SAASC,eAAe,SD2H3C,kBAAmBwG,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7c4cc1f3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ResponsiveLine } from \"@nivo/line\";\r\n\r\nclass LineChart extends React.Component {\r\n  theme = {\r\n    fontSize: \"1.25vw\"\r\n  };\r\n\r\n  render() {\r\n    var markers;\r\n    if (this.props.ymax === \"auto\") {\r\n      // game is to rounds\r\n      if (typeof this.props.data[0] !== \"undefined\") {\r\n        if (this.props.data[0].data.length >= this.props.gameLimit) {\r\n          markers = [\r\n            {\r\n              axis: \"x\",\r\n              value: this.props.gameLimit,\r\n              lineStyle: { stroke: \"#000000\", strokeWidth: 1 },\r\n              legend: \"Game Over!\"\r\n            }\r\n          ];\r\n        } else {\r\n          markers = [];\r\n        }\r\n      } else {\r\n        markers = [];\r\n      }\r\n    } else {\r\n      // game is to points\r\n      markers = [\r\n        {\r\n          axis: \"y\",\r\n          value: this.props.gameLimit,\r\n          lineStyle: { stroke: \"#000000\", strokeWidth: 1 },\r\n          legend: \"Game Over!\"\r\n        }\r\n      ];\r\n    }\r\n    return (\r\n      <ResponsiveLine\r\n        data={this.props.data}\r\n        theme={this.theme}\r\n        markers={markers}\r\n        margin={{ top: 50, right: 150, bottom: 150, left: 150 }}\r\n        xScale={{ type: \"point\", min: \"auto\", max: 10 /*this.props.xmax*/ }}\r\n        yScale={{\r\n          type: \"linear\",\r\n          stacked: false,\r\n          min: \"auto\",\r\n          max: this.props.ymax\r\n        }}\r\n        motionStiffness={10}\r\n        motionDamping={5}\r\n        axisTop={null}\r\n        axisRight={null}\r\n        axisBottom={{\r\n          orient: \"bottom\",\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: \"\",\r\n          legendOffset: 75,\r\n          legendPosition: \"middle\"\r\n        }}\r\n        axisLeft={{\r\n          orient: \"left\",\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: \"\",\r\n          legendOffset: -75,\r\n          legendPosition: \"middle\"\r\n        }}\r\n        colors={{ scheme: \"nivo\" }}\r\n        pointSize={10}\r\n        pointColor={{ theme: \"background\" }}\r\n        pointBorderWidth={2}\r\n        pointBorderColor={{ from: \"serieColor\" }}\r\n        pointLabel=\"y\"\r\n        pointLabelYOffset={-12}\r\n        useMesh={true}\r\n        legends={[\r\n          {\r\n            anchor: \"bottom-right\",\r\n            direction: \"column\",\r\n            justify: false,\r\n            translateX: 100,\r\n            translateY: 0,\r\n            itemsSpacing: 0,\r\n            itemDirection: \"left-to-right\",\r\n            itemWidth: 80,\r\n            itemHeight: 35,\r\n            itemOpacity: 0.75,\r\n            symbolSize: 12,\r\n            symbolShape: \"circle\",\r\n            symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n            effects: [\r\n              {\r\n                on: \"hover\",\r\n                style: {\r\n                  itemBackground: \"rgba(0, 0, 0, .03)\",\r\n                  itemOpacity: 1\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ]}\r\n      ></ResponsiveLine>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LineChart;\r\n","import React from \"react\";\r\nimport { Button } from \"antd\";\r\n\r\nclass LoadButton extends React.Component {\r\n  state = {\r\n    hover: false\r\n  };\r\n\r\n  styles1 = {\r\n    background: \"rgb(255,255,255,1)\",\r\n    color: \"rgb(0,0,0,.60)\",\r\n    border: \"2px solid rgb(66,78,191,.25)\",\r\n    margin: \"1px\",\r\n    width: \"20vw\",\r\n    height: \"4vw\",\r\n    fontSize: \"1vw\",\r\n    fontWeight: \"bold\"\r\n  };\r\n\r\n  styles2 = {\r\n    background: \"rgb(255,255,255,1)\",\r\n    color: \"rgb(66,78,191,.9)\",\r\n    border: \"2px solid rgb(66,78,191,.5)\",\r\n    margin: \"1px\",\r\n    width: \"20vw\",\r\n    height: \"4vw\",\r\n    fontSize: \"1vw\",\r\n    fontWeight: \"bold\"\r\n  };\r\n\r\n  styles3 = {\r\n    background: \"rgb(66,78,191,.1)\",\r\n    color: \"rgb(66,78,191,.9)\",\r\n    border: \"2px solid rgb(66,78,191,.5)\",\r\n    margin: \"1px\",\r\n    width: \"20vw\",\r\n    height: \"4vw\",\r\n    fontSize: \"1vw\",\r\n    fontWeight: \"bold\"\r\n  };\r\n\r\n  toggleHover = () => {\r\n    this.setState({ hover: !this.state.hover });\r\n    //console.log(\"hover\");\r\n  };\r\n\r\n  render() {\r\n    var styles = this.styles1;\r\n    if (this.state.hover && !this.props.activated) {\r\n      styles = this.styles2;\r\n    } else if (this.props.activated) {\r\n      styles = this.styles3;\r\n    }\r\n\r\n    return (\r\n      <div style={this.divStyle}>\r\n        <Button\r\n          style={styles}\r\n          size=\"large\"\r\n          type=\"primary\"\r\n          onMouseEnter={() => this.toggleHover()}\r\n          onMouseLeave={() => this.toggleHover()}\r\n          onClick={() => this.props.onClick(this.props.id)}\r\n        >\r\n          {this.props.name}\r\n          <br></br>\r\n          {this.props.dateModified}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadButton;\r\n","import React from \"react\";\r\nimport { Button, Modal, Icon, Popconfirm, Radio, notification } from \"antd\";\r\nimport \"./RBRSStyles.css\";\r\nimport LineChart from \"./LineChart.js\";\r\nimport LoadButton from \"./LoadButton.js\";\r\n\r\nclass RBRS extends React.Component {\r\n  state = {\r\n    players: [],\r\n    points: [],\r\n    totalPoints: [],\r\n    pointsOrRounds: [true, false], // gameLimit is points or rounds rounds\r\n    highScoreWins: true, // if highest score wins at end of game\r\n    gameLimit: 100,\r\n    modalVisible: [false, false, false], // load scoreboard, save scoreboard, add player\r\n    savedScoreboards: {},\r\n    scoreboardsList: [],\r\n    loadButtonSelect: [],\r\n    pointsOrRoundsRadio: 0,\r\n    highScoreWinsRadio: 0\r\n  };\r\n\r\n  buttonStyle = {\r\n    fontSize: \"1.25vw\",\r\n    height: \"2vw\",\r\n    margin: \".5vw\"\r\n  };\r\n\r\n  iconStyle = {\r\n    margin: \".1vw\",\r\n    fontSize: \".5vw\"\r\n  };\r\n\r\n  radioStyle = {\r\n    display: \"block\",\r\n    height: \"1.5vw\",\r\n    fontSize: \"1vw\",\r\n    marginLeft: \".2vw\"\r\n  };\r\n\r\n  notificationStyle = {\r\n    height: \"10vw\",\r\n    width: \"30vw\",\r\n    backgroundColor: \"rgb(255,255,0,.1)\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    //console.log(\"CDM\", typeof Storage === \"undefined\");\r\n    var savedScoreboards =\r\n      JSON.parse(localStorage.getItem(\"savedScoreboards\")) || {};\r\n    var scoreboardsList = [];\r\n    for (var scoreboard in savedScoreboards) {\r\n      scoreboardsList.push({\r\n        title: scoreboard,\r\n        dateModified: savedScoreboards[scoreboard].dateModified,\r\n        selected: false\r\n      });\r\n    }\r\n    this.setState({ savedScoreboards });\r\n    this.setState({ scoreboardsList });\r\n  }\r\n\r\n  addPoints = () => {\r\n    var points = [...this.state.points],\r\n      totalPoints = [...this.state.totalPoints],\r\n      newPoints = document.getElementById(\"addPoints\").value.split(\" \");\r\n    var oldLeaderboard = this.makeLeaderboard(totalPoints);\r\n    for (let i = 0; i < newPoints.length; ++i) {\r\n      if (newPoints[i] === \"\") {\r\n        newPoints[i] = 0;\r\n      } else if (isNaN(parseInt(newPoints[i]))) {\r\n        newPoints[i] = 0;\r\n      } else {\r\n        newPoints[i] = parseInt(newPoints[i], 10);\r\n      }\r\n    }\r\n    while (newPoints.length > this.state.players.length) {\r\n      newPoints.pop();\r\n    }\r\n    while (newPoints.length < this.state.players.length) {\r\n      newPoints.push(0);\r\n    }\r\n    if (newPoints.length > 0) {\r\n      points.push(newPoints);\r\n      for (let i = 0; i < newPoints.length; ++i) {\r\n        totalPoints[i] += newPoints[i];\r\n      }\r\n    }\r\n    var newLeaderboard = this.makeLeaderboard(totalPoints);\r\n    if (this.state.highScoreWins) {\r\n      if (newLeaderboard[0] !== oldLeaderboard[0]) {\r\n        notification[\"warning\"]({\r\n          message: newLeaderboard[0] + \" takes the lead!\",\r\n          description: \"\",\r\n          placement: \"bottomLeft\",\r\n          duration: 5,\r\n          icon: <Icon type=\"alert\" style={{ color: \"rgb(0,0,255,.75)\" }} />,\r\n          style: this.notificationStyle\r\n        });\r\n      } else if (newLeaderboard[1] !== oldLeaderboard[1]) {\r\n        notification[\"warning\"]({\r\n          message: newLeaderboard[1] + \" falls to last place!\",\r\n          description: \"\",\r\n          placement: \"bottomLeft\",\r\n          duration: 5,\r\n          icon: <Icon type=\"alert\" style={{ color: \"rgb(0,0,255,.75)\" }} />,\r\n          style: this.notificationStyle\r\n        });\r\n      }\r\n    } else {\r\n      if (newLeaderboard[1] !== oldLeaderboard[1]) {\r\n        notification[\"warning\"]({\r\n          message: newLeaderboard[1] + \" takes the lead!\",\r\n          description: \"\",\r\n          placement: \"bottomLeft\",\r\n          duration: 5,\r\n          icon: <Icon type=\"alert\" style={{ color: \"rgb(0,0,255,.75)\" }} />,\r\n          style: this.notificationStyle\r\n        });\r\n      } else if (newLeaderboard[0] !== oldLeaderboard[0]) {\r\n        notification[\"warning\"]({\r\n          message: newLeaderboard[0] + \" falls to last place!\",\r\n          description: \"\",\r\n          placement: \"bottomLeft\",\r\n          duration: 5,\r\n          icon: <Icon type=\"alert\" style={{ color: \"rgb(0,0,255,.75)\" }} />,\r\n          style: this.notificationStyle\r\n        });\r\n      }\r\n    }\r\n\r\n    this.setState({ points });\r\n    this.setState({ totalPoints });\r\n  };\r\n\r\n  makeLeaderboard = totalPoints => {\r\n    var maxPoints = -1,\r\n      minPoints = 100000,\r\n      maxIx,\r\n      minIx;\r\n    for (let i = 0; i < totalPoints.length; i++) {\r\n      if (totalPoints[i] > maxPoints) {\r\n        maxPoints = totalPoints[i];\r\n        maxIx = i;\r\n      }\r\n      if (totalPoints[i] < minPoints) {\r\n        minPoints = totalPoints[i];\r\n        minIx = i;\r\n      }\r\n    }\r\n    return [this.state.players[maxIx], this.state.players[minIx]];\r\n  };\r\n\r\n  loadScoreboard = () => {\r\n    var newScoreboard = \"null\";\r\n    for (let i = 0; i < this.state.scoreboardsList.length; ++i) {\r\n      if (this.state.scoreboardsList[i].selected) {\r\n        newScoreboard = this.state.scoreboardsList[i].title;\r\n      }\r\n    }\r\n    if (newScoreboard !== \"null\") {\r\n      this.setState({\r\n        players: this.state.savedScoreboards[newScoreboard].players\r\n      });\r\n      this.setState({\r\n        points: this.state.savedScoreboards[newScoreboard].points\r\n      });\r\n      this.setState({\r\n        totalPoints: this.state.savedScoreboards[newScoreboard].totalPoints\r\n      });\r\n      this.setState({\r\n        pointsOrRounds: this.state.savedScoreboards[newScoreboard]\r\n          .pointsOrRounds\r\n      });\r\n      this.setState({\r\n        gameLimit: this.state.savedScoreboards[newScoreboard].gameLimit\r\n      });\r\n    }\r\n    var scoreboardsList = [...this.state.scoreboardsList];\r\n    for (let i = 0; i < scoreboardsList.length; ++i) {\r\n      scoreboardsList[i].selected = false;\r\n    }\r\n    this.setState({ scoreboardsList });\r\n    this.closeModals();\r\n  };\r\n\r\n  padNum = string => {\r\n    /* Assumes string is can be converted to a number. Adds a leading\r\n    zero to single digit numbers. */\r\n    if (string.length === 1) {\r\n      string = \"0\" + string;\r\n    }\r\n    return string;\r\n  };\r\n\r\n  saveScoreboard = () => {\r\n    if (\r\n      typeof this.state.scoreboardTitle === \"undefined\" ||\r\n      this.state.scoreboardTitle === \"null\"\r\n    ) {\r\n      notification[\"warning\"]({\r\n        message: \"Saved failed\",\r\n        description: \"Title cannot be blank.\",\r\n        placement: \"bottomLeft\",\r\n        duration: 3\r\n      });\r\n    } else {\r\n      var today = new Date();\r\n      var currentYear = today.getFullYear();\r\n      var currentMonth = today.getMonth() + 1;\r\n      var currentDate = today.getDate();\r\n      var todaysDate =\r\n        this.padNum(currentMonth.toString()) +\r\n        \"-\" +\r\n        this.padNum(currentDate.toString()) +\r\n        \"-\" +\r\n        currentYear.toString();\r\n      var savedScoreboards = this.state.savedScoreboards;\r\n      var newScoreboard = {\r\n        title: this.state.scoreboardTitle,\r\n        points: this.state.points,\r\n        players: this.state.players,\r\n        totalPoints: this.state.totalPoints,\r\n        pointsOrRounds: this.state.pointsOrRounds,\r\n        gameLimit: this.state.gameLimit,\r\n        dateModified: todaysDate\r\n      };\r\n      savedScoreboards[this.state.scoreboardTitle] = newScoreboard;\r\n      var scoreboardsList = [...this.state.scoreboardsList];\r\n      scoreboardsList.push({\r\n        title: newScoreboard.title,\r\n        dateModified: newScoreboard.dateModified,\r\n        selected: false\r\n      });\r\n      this.setState({ savedScoreboards });\r\n      localStorage.setItem(\r\n        \"savedScoreboards\",\r\n        JSON.stringify(savedScoreboards)\r\n      );\r\n      console.log(savedScoreboards, JSON.stringify(savedScoreboards));\r\n      this.setState({ scoreboardsList });\r\n      this.closeModals();\r\n    }\r\n  };\r\n\r\n  addPlayer = () => {\r\n    var newPlayer = document.getElementById(\"playerName\").value;\r\n    if (newPlayer !== \"\") {\r\n      var players = [...this.state.players];\r\n      var totalPoints = [...this.state.totalPoints];\r\n      var points = [...this.state.points];\r\n      players.push(newPlayer);\r\n      totalPoints.push(0);\r\n      for (let i = 0; i < points.length; ++i) {\r\n        points[i].push(0);\r\n      }\r\n      this.setState({ players });\r\n      this.setState({ totalPoints });\r\n      this.setState({ points });\r\n    }\r\n  };\r\n\r\n  removePlayer = player => {\r\n    var players = [...this.state.players];\r\n    players.splice(player, 1);\r\n    var totalPoints = [...this.state.totalPoints];\r\n    totalPoints.splice(player, 1);\r\n    var points = this.state.points;\r\n    for (let round = 0; round < points.length; ++round) {\r\n      points[round].splice(player, 1);\r\n    }\r\n    this.setState({ players });\r\n    this.setState({ totalPoints });\r\n    this.setState({ points });\r\n  };\r\n\r\n  removeRound = round => {\r\n    var points = [...this.state.points];\r\n    var totalPoints = [...this.state.totalPoints];\r\n    for (let i = 0; i < totalPoints.length; ++i) {\r\n      totalPoints[i] -= points[round][i];\r\n    }\r\n    points.splice(round, 1);\r\n    this.setState({ points });\r\n    this.setState({ totalPoints });\r\n  };\r\n\r\n  clearPoints = () => {\r\n    var totalPoints = [];\r\n    for (let i = 0; i < this.state.players.length; ++i) {\r\n      totalPoints.push(0);\r\n    }\r\n    this.setState({ points: [] });\r\n    this.setState({ totalPoints });\r\n  };\r\n\r\n  clearPlayers = () => {\r\n    this.setState({ points: [] });\r\n    this.setState({ totalPoints: [] });\r\n    this.setState({ players: [] });\r\n  };\r\n\r\n  closeModals = () => {\r\n    this.setState({ modalVisible: [false, false, false] });\r\n  };\r\n\r\n  changeGameLimit = () => {\r\n    var gameLimit = parseInt(document.getElementById(\"gameLimit\").value, 10);\r\n    if (typeof gameLimit === \"number\") {\r\n      this.setState({ gameLimit });\r\n    } else {\r\n      this.setState({ gameLimit: 100 });\r\n    }\r\n  };\r\n\r\n  makeChartData = () => {\r\n    var chartData = [];\r\n    for (let player = 0; player < this.state.players.length; ++player) {\r\n      var playerOngoingTotal = [];\r\n      for (\r\n        let lastRound = 0;\r\n        lastRound < this.state.points.length;\r\n        ++lastRound\r\n      ) {\r\n        var totalPoints = 0;\r\n        for (let round = 0; round <= lastRound; ++round) {\r\n          totalPoints += this.state.points[round][player];\r\n        }\r\n        playerOngoingTotal.push({ x: lastRound + 1, y: totalPoints });\r\n      }\r\n      var playerInfo = {\r\n        id: this.state.players[player],\r\n        data: playerOngoingTotal\r\n      };\r\n      chartData.push(playerInfo);\r\n    }\r\n    return chartData;\r\n  };\r\n\r\n  modalClick = modal => {\r\n    var modalVisible = [];\r\n    for (let i = 0; i < this.state.modalVisible.length; ++i) {\r\n      if (i === modal) {\r\n        modalVisible.push(true);\r\n      } else {\r\n        modalVisible.push(false);\r\n      }\r\n    }\r\n    this.setState({ modalVisible });\r\n  };\r\n\r\n  pointsOrRounds = radio => {\r\n    if (radio.target.value) {\r\n      this.setState({ pointsOrRounds: [false, true] });\r\n      this.setState({ pointsOrRoundsRadio: 1 });\r\n    } else {\r\n      this.setState({ pointsOrRounds: [true, false] });\r\n      this.setState({ pointsOrRoundsRadio: 0 });\r\n    }\r\n  };\r\n\r\n  highScoreWins = radio => {\r\n    if (radio.target.value) {\r\n      this.setState({ highScoreWins: false });\r\n      this.setState({ highScoreWinsRadio: 1 });\r\n    } else {\r\n      this.setState({ highScoreWins: true });\r\n      this.setState({ highScoreWinsRadio: 0 });\r\n    }\r\n  };\r\n\r\n  updateScoreboardTitle = () => {\r\n    var scoreboardTitle = document.getElementById(\"scoreboardTitle\").value;\r\n    this.setState({ scoreboardTitle });\r\n  };\r\n\r\n  loadButtonSelect = id => {\r\n    var scoreboardsList = this.state.scoreboardsList;\r\n    for (let i = 0; i < this.state.scoreboardsList.length; ++i) {\r\n      if (i === id) {\r\n        scoreboardsList[i].selected = !scoreboardsList[i].selected;\r\n      } else {\r\n        scoreboardsList[i].selected = false;\r\n      }\r\n    }\r\n    this.setState({ scoreboardsList });\r\n  };\r\n\r\n  deleteScoreboard = (scoreboardTitle, index) => {\r\n    console.log(scoreboardTitle, index);\r\n    var savedScoreboards = this.state.savedScoreboards;\r\n    delete savedScoreboards[scoreboardTitle];\r\n    var scoreboardsList = [...this.state.scoreboardsList];\r\n    scoreboardsList.splice(index, 1);\r\n    this.setState({ savedScoreboards });\r\n    this.setState({ scoreboardsList });\r\n    localStorage.setItem(\"savedScoreboards\", JSON.stringify(savedScoreboards));\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state.savedScoreboards);\r\n    var emptyScoreboard;\r\n    if (this.state.players.length === 0) {\r\n      emptyScoreboard = (\r\n        <div className=\"emptyScoreboard\">\r\n          The scoreboard is empty!{\" \"}\r\n          <Button\r\n            type=\"secondary\"\r\n            style={this.buttonStyle}\r\n            onClick={() => this.modalClick(2)}\r\n          >\r\n            Add Players\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    var chartData = this.makeChartData();\r\n\r\n    var maxPoints = 0,\r\n      minPoints = 1000000;\r\n    for (let i = 0; i < this.state.totalPoints.length; ++i) {\r\n      if (this.state.totalPoints[i] > maxPoints) {\r\n        maxPoints = this.state.totalPoints[i];\r\n      }\r\n      if (this.state.totalPoints[i] < minPoints) {\r\n        minPoints = this.state.totalPoints[i];\r\n      }\r\n    }\r\n\r\n    var chartYmax, chartXmax;\r\n    if (this.state.pointsOrRounds[0]) {\r\n      // game is to points\r\n      chartYmax = Math.max(1.1 * this.state.gameLimit, maxPoints);\r\n      chartXmax = this.state.points.length + 1;\r\n    } else {\r\n      // game is to rounds\r\n      chartYmax = \"auto\";\r\n      chartXmax = this.state.gameLimit + 1;\r\n    }\r\n\r\n    var playerIcons = [],\r\n      pointsGameIsOver = false,\r\n      noOneIsMax = true,\r\n      noOneIsMin = true;\r\n    for (let player = 0; player < this.state.players.length; ++player) {\r\n      if (this.state.totalPoints[player] >= this.state.gameLimit) {\r\n        pointsGameIsOver = true;\r\n      }\r\n    }\r\n    for (let player = 0; player < this.state.players.length; ++player) {\r\n      if (this.state.pointsOrRounds[0]) {\r\n        // game is to points\r\n        if (this.state.highScoreWins) {\r\n          // highest score wins\r\n          if (\r\n            pointsGameIsOver &&\r\n            this.state.totalPoints[player] === maxPoints &&\r\n            this.state.points.length > 0\r\n          ) {\r\n            playerIcons.push(\r\n              <Icon\r\n                type=\"star\"\r\n                theme=\"twoTone\"\r\n                twoToneColor=\"#ffae00\"\r\n                spin\r\n              ></Icon>\r\n            );\r\n          } else if (\r\n            this.state.totalPoints[player] === maxPoints &&\r\n            this.state.points.length > 0 &&\r\n            noOneIsMax\r\n          ) {\r\n            playerIcons.push(\r\n              <Icon type=\"smile\" theme=\"twoTone\" twoToneColor=\"#0dff00\"></Icon>\r\n            );\r\n            noOneIsMax = false;\r\n          } else if (\r\n            this.state.totalPoints[player] === minPoints &&\r\n            this.state.points.length > 0\r\n          ) {\r\n            playerIcons.push(\r\n              <Icon type=\"frown\" theme=\"twoTone\" twoToneColor=\"#fa8484\"></Icon>\r\n            );\r\n          } else {\r\n            playerIcons.push(\r\n              <Icon type=\"meh\" theme=\"twoTone\" twoToneColor=\"#ffbb00\"></Icon>\r\n            );\r\n          }\r\n        } else {\r\n          // lowest score wins\r\n          if (\r\n            pointsGameIsOver &&\r\n            this.state.totalPoints[player] === minPoints &&\r\n            this.state.points.length > 0\r\n          ) {\r\n            playerIcons.push(\r\n              <Icon\r\n                type=\"star\"\r\n                theme=\"twoTone\"\r\n                twoToneColor=\"#ffae00\"\r\n                spin\r\n              ></Icon>\r\n            );\r\n          } else if (\r\n            this.state.totalPoints[player] === minPoints &&\r\n            this.state.points.length > 0 &&\r\n            noOneIsMin\r\n          ) {\r\n            playerIcons.push(\r\n              <Icon type=\"smile\" theme=\"twoTone\" twoToneColor=\"#0dff00\"></Icon>\r\n            );\r\n            noOneIsMin = false;\r\n          } else if (\r\n            this.state.totalPoints[player] === maxPoints &&\r\n            this.state.points.length > 0\r\n          ) {\r\n            playerIcons.push(\r\n              <Icon type=\"frown\" theme=\"twoTone\" twoToneColor=\"#fa8484\"></Icon>\r\n            );\r\n          } else {\r\n            playerIcons.push(\r\n              <Icon type=\"meh\" theme=\"twoTone\" twoToneColor=\"#ffbb00\"></Icon>\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        // game is to rounds\r\n        if (this.state.highScoreWins) {\r\n          // highest score wins\r\n          if (\r\n            chartData[0].data.length >= this.state.gameLimit &&\r\n            this.state.totalPoints[player] === maxPoints\r\n          ) {\r\n            playerIcons.push(\r\n              <Icon\r\n                type=\"star\"\r\n                theme=\"twoTone\"\r\n                twoToneColor=\"#ffae00\"\r\n                spin\r\n              ></Icon>\r\n            );\r\n          } else if (\r\n            this.state.totalPoints[player] === maxPoints &&\r\n            this.state.points.length > 0 &&\r\n            noOneIsMax\r\n          ) {\r\n            playerIcons.push(\r\n              <Icon type=\"smile\" theme=\"twoTone\" twoToneColor=\"#0dff00\"></Icon>\r\n            );\r\n            noOneIsMax = false;\r\n          } else if (\r\n            this.state.totalPoints[player] === minPoints &&\r\n            this.state.points.length > 0\r\n          ) {\r\n            playerIcons.push(\r\n              <Icon type=\"frown\" theme=\"twoTone\" twoToneColor=\"#fa8484\"></Icon>\r\n            );\r\n          } else {\r\n            playerIcons.push(\r\n              <Icon type=\"meh\" theme=\"twoTone\" twoToneColor=\"#ffbb00\"></Icon>\r\n            );\r\n          }\r\n        } else {\r\n          // lowest score wins\r\n          if (\r\n            chartData[0].data.length >= this.state.gameLimit &&\r\n            this.state.totalPoints[player] === minPoints\r\n          ) {\r\n            playerIcons.push(\r\n              <Icon\r\n                type=\"star\"\r\n                theme=\"twoTone\"\r\n                twoToneColor=\"#ffae00\"\r\n                spin\r\n              ></Icon>\r\n            );\r\n          } else if (\r\n            this.state.totalPoints[player] === minPoints &&\r\n            this.state.points.length > 0 &&\r\n            noOneIsMin\r\n          ) {\r\n            playerIcons.push(\r\n              <Icon type=\"smile\" theme=\"twoTone\" twoToneColor=\"#0dff00\"></Icon>\r\n            );\r\n            noOneIsMin = false;\r\n          } else if (\r\n            this.state.totalPoints[player] === maxPoints &&\r\n            this.state.points.length > 0\r\n          ) {\r\n            playerIcons.push(\r\n              <Icon type=\"frown\" theme=\"twoTone\" twoToneColor=\"#fa8484\"></Icon>\r\n            );\r\n          } else {\r\n            playerIcons.push(\r\n              <Icon type=\"meh\" theme=\"twoTone\" twoToneColor=\"#ffbb00\"></Icon>\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    var saveScoreboardWarning = <div className=\"saveScoreboardWarning\"></div>;\r\n    if (\r\n      typeof this.state.savedScoreboards[this.state.scoreboardTitle] !==\r\n      \"undefined\"\r\n    ) {\r\n      saveScoreboardWarning = (\r\n        <div className=\"saveScoreboardWarning\">\r\n          WARNING: This scoreboard title already exists. Saving now will\r\n          overwrite.\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"mainButtons\">\r\n          <Button\r\n            type=\"secondary\"\r\n            style={this.buttonStyle}\r\n            onClick={() => this.modalClick(0)}\r\n          >\r\n            Load Scoreboard\r\n          </Button>\r\n          <Button\r\n            type=\"secondary\"\r\n            style={this.buttonStyle}\r\n            onClick={() => this.modalClick(1)}\r\n          >\r\n            Save Scoreboard\r\n          </Button>\r\n          <Button\r\n            type=\"secondary\"\r\n            style={this.buttonStyle}\r\n            onClick={() => this.modalClick(2)}\r\n          >\r\n            Add Players\r\n          </Button>\r\n          <Button\r\n            type=\"danger\"\r\n            style={this.buttonStyle}\r\n            onClick={this.clearPoints}\r\n          >\r\n            Clear Points\r\n          </Button>\r\n          <Button\r\n            type=\"danger\"\r\n            style={this.buttonStyle}\r\n            onClick={this.clearPlayers}\r\n          >\r\n            Clear Players\r\n          </Button>\r\n          <div className=\"gameLimit\">\r\n            Game is to:{\" \"}\r\n            <input\r\n              type=\"text\"\r\n              size=\"5\"\r\n              id=\"gameLimit\"\r\n              placeholder=\"100\"\r\n              onChange={this.changeGameLimit}\r\n            ></input>\r\n            <Radio.Group\r\n              onChange={this.pointsOrRounds}\r\n              value={this.state.pointsOrRoundsRadio}\r\n            >\r\n              <Radio value={0} style={this.radioStyle}>\r\n                Points\r\n              </Radio>\r\n              <Radio value={1} style={this.radioStyle}>\r\n                Rounds\r\n              </Radio>\r\n            </Radio.Group>\r\n            <span className=\"highWins\">\r\n              <Radio.Group\r\n                onChange={this.highScoreWins}\r\n                value={this.state.highScoreWinsRadio}\r\n              >\r\n                <Radio value={0} style={this.radioStyle}>\r\n                  Highest Score Wins\r\n                </Radio>\r\n                <Radio value={1} style={this.radioStyle}>\r\n                  Lowest Score Wins\r\n                </Radio>\r\n              </Radio.Group>\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"addPoints\">\r\n          <input type=\"text\" placeholder=\"Enter points.\" id=\"addPoints\"></input>\r\n          <Button\r\n            type=\"primary\"\r\n            style={this.buttonStyle}\r\n            onClick={this.addPoints}\r\n          >\r\n            Add Points\r\n          </Button>\r\n        </div>\r\n        {emptyScoreboard}\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <td className=\"emptyCell\"></td>\r\n              {this.state.players.map((player, index) => (\r\n                <th key={\"player\" + index}>\r\n                  {player} <br></br>\r\n                  {playerIcons[index]} {this.state.totalPoints[index]}\r\n                  <br></br>\r\n                  <Popconfirm\r\n                    title={\"Remove \" + player + \" from game?\"}\r\n                    onConfirm={() => this.removePlayer(index)}\r\n                  >\r\n                    <Icon\r\n                      type=\"close-circle\"\r\n                      theme=\"twoTone\"\r\n                      twoToneColor=\"#fc9999\"\r\n                      style={this.iconStyle}\r\n                    ></Icon>\r\n                  </Popconfirm>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.points.map((round, index) => (\r\n              <tr key={\"roundRow \" + index}>\r\n                <td className=\"roundNumber\">\r\n                  <Popconfirm\r\n                    title={\r\n                      \"Delete round \" +\r\n                      (parseInt(index, 10) + 1).toString() +\r\n                      \" ?\"\r\n                    }\r\n                    onConfirm={() => this.removeRound(index)}\r\n                  >\r\n                    <Icon\r\n                      type=\"close-circle\"\r\n                      theme=\"twoTone\"\r\n                      twoToneColor=\"#fc9999\"\r\n                      style={this.iconStyle}\r\n                    ></Icon>\r\n                  </Popconfirm>\r\n                  {index + 1}\r\n                </td>\r\n                {round.map(player => (\r\n                  <td key={\"roundCell \" + index + \" \" + player}>{player}</td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"lineChart\">\r\n          <LineChart\r\n            xmax={chartXmax}\r\n            ymax={chartYmax}\r\n            gameLimit={this.state.gameLimit}\r\n            data={chartData}\r\n          ></LineChart>\r\n        </div>\r\n        <Modal\r\n          visible={this.state.modalVisible[0]}\r\n          onCancel={this.closeModals}\r\n          onOk={this.loadScoreboard}\r\n        >\r\n          <div className=\"modal\">\r\n            Select a Scoreboard:<br></br>\r\n            {this.state.scoreboardsList.map((scoreboard, index) => (\r\n              <div>\r\n                <LoadButton\r\n                  key={\"scoreboard-\" + scoreboard.title}\r\n                  id={index}\r\n                  name={scoreboard.title}\r\n                  dateModified={scoreboard.dateModified}\r\n                  activated={this.state.scoreboardsList[index].selected}\r\n                  onClick={this.loadButtonSelect}\r\n                ></LoadButton>\r\n                <Popconfirm\r\n                  title={\"Delete \" + scoreboard.title + \" ?\"}\r\n                  onConfirm={() =>\r\n                    this.deleteScoreboard(scoreboard.title, index)\r\n                  }\r\n                >\r\n                  <Icon\r\n                    type=\"close-circle\"\r\n                    theme=\"twoTone\"\r\n                    twoToneColor=\"#fc9999\"\r\n                    style={this.iconStyle}\r\n                  ></Icon>\r\n                </Popconfirm>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Modal>\r\n        <Modal\r\n          visible={this.state.modalVisible[1]}\r\n          onCancel={this.closeModals}\r\n          onOk={this.saveScoreboard}\r\n          okText=\"Save\"\r\n        >\r\n          <div className=\"modal\">\r\n            Title of Scoreboard:<br></br>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Title\"\r\n              id=\"scoreboardTitle\"\r\n              onChange={this.updateScoreboardTitle}\r\n            ></input>\r\n            {saveScoreboardWarning}\r\n          </div>\r\n        </Modal>\r\n        <Modal\r\n          visible={this.state.modalVisible[2]}\r\n          onCancel={this.closeModals}\r\n          cancelText=\"Done\"\r\n          onOk={this.closeModals}\r\n        >\r\n          <div className=\"modal\">\r\n            Add Players:<br></br>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Player Name\"\r\n              id=\"playerName\"\r\n            ></input>\r\n            <br></br>\r\n            <Button\r\n              style={this.buttonStyle}\r\n              type=\"primary\"\r\n              size=\"large\"\r\n              onClick={this.addPlayer}\r\n            >\r\n              Add Player\r\n            </Button>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RBRS;\r\n","import React from \"react\";\n//import logo from \"./logo.svg\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport RBRS from \"./RoundByRoundScoreboard/index.js\";\n\nfunction App() {\n  return (\n    <div>\n      <RBRS></RBRS>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}